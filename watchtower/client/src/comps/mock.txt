[
  {
    "Id": "f11dec97-f6c7-48e2-8fc0-2b7aaa5fc89d",
    "name": "Network 1",
    "devices": [
      {
        "isNode": false,
        "lng": -79.92179,
        "status": true,
        "Id": "6a54a570-407b-48f1-8ee6-6c35ac54f589",
        "lat": 43.277704,
        "name": "Hub1",
        "battery": 0.9,
        "data": {
          "timestamp": 1634505961.4751132
        }
      },
      {
        "isNode": true,
        "lng": -79.922815,
        "status": true,
        "Id": "d4fc32bc-1ea8-4088-8649-e1e59f0a4229",
        "lat": 43.280821,
        "name": "Node1",
        "battery": 0.9,
        "data": {
          "hum": 29,
          "temp": 16,
          "timestamp": 1634505961.4750924
        }
      },
      {
        "isNode": true,
        "lng": -79.911578,
        "status": true,
        "Id": "a5a56a94-a7c8-4c0b-bf8e-5bd6ca0d1e72",
        "lat": 43.282137,
        "name": "Node2",
        "battery": 0.9,
        "data": {
          "hum": 35,
          "temp": 8,
          "timestamp": 1634505962.7735138
        }
      },
      {
        "isNode": true,
        "lng": -79.926248,
        "status": true,
        "Id": "37105acb-fa09-43d6-a58c-a2632e2b629d",
        "lat": 43.276972,
        "name": "Node3",
        "battery": 0.9,
        "data": {
          "hum": 42,
          "temp": 30,
          "timestamp": 1634505962.7735248
        }
      }
    ]
  }
]


import React, { useState } from 'react';
import { Table, Tag, Space, Button, Input, InputNumber, Popconfirm, Form, Typography } from 'antd';
import { SaveOutlined } from '@ant-design/icons';

const devices = data[0].devices.map((device) => {
	let type = device.isNode ? 'node' : 'hub';
	return {
		name: device.name,
		lat: device.lat,
		long: device.lng,
		tags: [type, device.status],
	};
});

const ogData = devices;

const EditableCell = ({ editing, dataIndex, title, inputType, record, index, children, ...restProps }) => {
	const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;
	return (
		<td {...restProps}>
			{editing ? (
				<Form.Item
					name={dataIndex}
					style={{
						margin: 0,
					}}
					rules={[
						{
							required: true,
							message: `Please Input ${title}!`,
						},
					]}
				>
					{inputNode}
				</Form.Item>
			) : (
				children
			)}
		</td>
	);
};

const EditInfo = () => {
	const [form] = Form.useForm();
	const [data, setData] = useState(ogData);
	const [editingKey, setEditingKey] = useState('');

	const isEditing = (record) => record.key === editingKey;

	const edit = (record) => {
		form.setFieldsValue({
			name: '',
			age: '',
			address: '',
			...record,
		});
		setEditingKey(record.key);
	};

	const cancel = () => {
		setEditingKey('');
	};

	const save = async (key) => {
		try {
			const row = await form.validateFields();
			const newData = [...data];
			const index = newData.findIndex((item) => key === item.key);

			if (index > -1) {
				const item = newData[index];
				newData.splice(index, 1, { ...item, ...row });
				setData(newData);
				setEditingKey('');
			} else {
				newData.push(row);
				setData(newData);
				setEditingKey('');
			}
		} catch (errInfo) {
			console.log('Validate Failed:', errInfo);
		}
	};

	const columns = [
		{
			title: 'Name',
			dataIndex: 'name',
			key: 'name',
			editable: true,
			render: (text) => <a>{text}</a>,
		},
		{
			title: 'Longitude',
			dataIndex: 'long',
			key: 'long',
			editable: true,
		},
		{
			title: 'Latitude',
			dataIndex: 'lat',
			key: 'lat',
			editable: true,
		},
		{
			title: 'Tags',
			key: 'tags',
			dataIndex: 'tags',
			width: 100,
			render: (tags) => (
				<>
					{tags.map((tag) => {
						let color = tag == 'node' ? 'geekblue' : 'green';
						if (tag === false) {
							color = 'volcano';
						}
						return (
							<Tag color={color} key={tag}>
								{tag.toString()}
							</Tag>
						);
					})}
				</>
			),
		},
		{
			title: 'operation',
			dataIndex: 'operation',
			render: (_, record) => {
				const editable = isEditing(record);
				return editable ? (
					<span>
						<a
							href='javascript:;'
							onClick={() => save(record.key)}
							style={{
								marginRight: 8,
							}}
						>
							Save
						</a>
						<Popconfirm title='Sure to cancel?' onConfirm={cancel}>
							<a>Cancel</a>
						</Popconfirm>
					</span>
				) : (
					<Typography.Link disabled={editingKey !== ''} onClick={() => edit(record)}>
						Edit
					</Typography.Link>
				);
			},
		},
	];
	const mergedColumns = columns.map((col) => {
		if (!col.editable) {
			return col;
		}

		return {
			...col,
			onCell: (record) => ({
				record,
				inputType: col.dataIndex === 'age' ? 'number' : 'text',
				dataIndex: col.dataIndex,
				title: col.title,
				editing: isEditing(record),
			}),
		};
	});
	return (
		<Form form={form} component={false}>
			<Table
				components={{
					body: {
						cell: EditableCell,
					},
				}}
				bordered
				dataSource={data}
				columns={mergedColumns}
				rowClassName='editable-row'
				pagination={{
					onChange: cancel,
				}}
			/>
		</Form>
	);
};

export default EditInfo;
